/*
Passport.js

Basically the passport is a middleware that is responsible for converting the cookie info from the req
and altering the req obj such that it'll hold the actual user id(of the mongo db instance) to continue further. 



*/



const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose  = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');


/*

*/
passport.serializeUser((user, done) => {
    console.log('inside serializeUser')
    /*
    serializeUser function helps in extracting the unique property, here the id,
    from the incoming user object, and returns only the id from the user
    object. ie., user.id
    
    user.id is the piece of info which is returned by the Mongo id is a unique ID generated by Mongo 
    for that instace and it is not the same as googleID value, both are different. */
    done(null, user.id);
    /*because not everyone will login through google only, we may sign in thru FB, but the user.id
    remains the same*/
});

passport.deserializeUser((id, done) => {
    console.log('inside deserializeUser')
    User.findById(id)
    .then( user => {
        console.log('inside found block of deserializeUser')
        done(null, user);
        /*
        if found dont do any changes in the cookie header, since the user object
        already contains user.id
        
        */
    });
});



passport.use(new GoogleStrategy({

    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    proxy :true,
    callbackURL: '/auth/google/callback'
}, (accessToken,refreshToken, profile, done) => {
    User.findOne({googleID : profile.id})
    .then((existingUser) => {
        if(existingUser){
            console.log('inside existing user block of googleStrategy')
            done(null, existingUser);
            /*
            here existingUser will be the one which will be the user object
            throughout the session
            */
        }
        else{
            console.log('inside new user creation block of googleStrategy')
            new User({ googleID : profile.id }).save()
            .then(user => done(null, user)); 
            //user is the returned  instance from the new User line after saving it
            //user contains the googleID and the the model instance id
        }
    })
    
}));


/*
WORKING OF 
passport.serializeUser(function(user, done) {
    done(null, user.id);
});              │
                 │ 
                 │
                 └─────────────────┬──
                                   │    
                                   │
                                   ↓           
passport.deserializeUser(function(id, done) {
                   ┌───────────────┘
                   │
                   ↓ 
    User.findById(id, function(err, user) {
        done(err, user);
    });            └──────────────→ user object attaches to the request as req.user   
});
  

NOTE:


*/
 